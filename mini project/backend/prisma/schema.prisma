// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  password    String
  name        String
  role        UserRole    @default(CUSTOMER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]
  reservations Reservation[]
  reviews     Review[]
}

model AdminInvite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  menuItems MenuItem[]
}

model MenuItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  image       String?  // URL or path to the image
  available   Boolean  @default(true)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  review     Review?
}

model OrderItem {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String    @db.ObjectId
  menuItemId String   @db.ObjectId
  quantity  Int
  order     Order     @relation(fields: [orderId], references: [id])
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [id])
}

model Reservation {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  userId    String             @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  table     Int
  time      DateTime
  status    ReservationStatus  @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Review {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @unique @db.ObjectId
  userId    String      @db.ObjectId
  rating    Int
  comment   String?
  status    ReviewStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  order     Order       @relation(fields: [orderId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}
